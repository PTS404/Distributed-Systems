// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: grpc/proto.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Course_AskForCourse_FullMethodName = "/gRPCIntro.Course/AskForCourse"
)

// CourseClient is the client API for Course service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseClient interface {
	AskForCourse(ctx context.Context, in *AskForCourseMessage, opts ...grpc.CallOption) (*CourseMessage, error)
}

type courseClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseClient(cc grpc.ClientConnInterface) CourseClient {
	return &courseClient{cc}
}

func (c *courseClient) AskForCourse(ctx context.Context, in *AskForCourseMessage, opts ...grpc.CallOption) (*CourseMessage, error) {
	out := new(CourseMessage)
	err := c.cc.Invoke(ctx, Course_AskForCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServer is the server API for Course service.
// All implementations must embed UnimplementedCourseServer
// for forward compatibility
type CourseServer interface {
	AskForCourse(context.Context, *AskForCourseMessage) (*CourseMessage, error)
	mustEmbedUnimplementedCourseServer()
}

// UnimplementedCourseServer must be embedded to have forward compatible implementations.
type UnimplementedCourseServer struct {
}

func (UnimplementedCourseServer) AskForCourse(context.Context, *AskForCourseMessage) (*CourseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskForCourse not implemented")
}
func (UnimplementedCourseServer) mustEmbedUnimplementedCourseServer() {}

// UnsafeCourseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseServer will
// result in compilation errors.
type UnsafeCourseServer interface {
	mustEmbedUnimplementedCourseServer()
}

func RegisterCourseServer(s grpc.ServiceRegistrar, srv CourseServer) {
	s.RegisterService(&Course_ServiceDesc, srv)
}

func _Course_AskForCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskForCourseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).AskForCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Course_AskForCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).AskForCourse(ctx, req.(*AskForCourseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Course_ServiceDesc is the grpc.ServiceDesc for Course service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Course_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPCIntro.Course",
	HandlerType: (*CourseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskForCourse",
			Handler:    _Course_AskForCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}

const (
	Student_AskForStudent_FullMethodName = "/gRPCIntro.Student/AskForStudent"
)

// StudentClient is the client API for Student service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentClient interface {
	AskForStudent(ctx context.Context, in *AskForStudentMessage, opts ...grpc.CallOption) (*StudentMessage, error)
}

type studentClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentClient(cc grpc.ClientConnInterface) StudentClient {
	return &studentClient{cc}
}

func (c *studentClient) AskForStudent(ctx context.Context, in *AskForStudentMessage, opts ...grpc.CallOption) (*StudentMessage, error) {
	out := new(StudentMessage)
	err := c.cc.Invoke(ctx, Student_AskForStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentServer is the server API for Student service.
// All implementations must embed UnimplementedStudentServer
// for forward compatibility
type StudentServer interface {
	AskForStudent(context.Context, *AskForStudentMessage) (*StudentMessage, error)
	mustEmbedUnimplementedStudentServer()
}

// UnimplementedStudentServer must be embedded to have forward compatible implementations.
type UnimplementedStudentServer struct {
}

func (UnimplementedStudentServer) AskForStudent(context.Context, *AskForStudentMessage) (*StudentMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskForStudent not implemented")
}
func (UnimplementedStudentServer) mustEmbedUnimplementedStudentServer() {}

// UnsafeStudentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentServer will
// result in compilation errors.
type UnsafeStudentServer interface {
	mustEmbedUnimplementedStudentServer()
}

func RegisterStudentServer(s grpc.ServiceRegistrar, srv StudentServer) {
	s.RegisterService(&Student_ServiceDesc, srv)
}

func _Student_AskForStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskForStudentMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).AskForStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Student_AskForStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).AskForStudent(ctx, req.(*AskForStudentMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Student_ServiceDesc is the grpc.ServiceDesc for Student service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Student_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPCIntro.Student",
	HandlerType: (*StudentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskForStudent",
			Handler:    _Student_AskForStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}

const (
	Teacher_AskForTeacher_FullMethodName = "/gRPCIntro.Teacher/AskForTeacher"
)

// TeacherClient is the client API for Teacher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeacherClient interface {
	AskForTeacher(ctx context.Context, in *AskForTeacherMessage, opts ...grpc.CallOption) (*TeacherMessage, error)
}

type teacherClient struct {
	cc grpc.ClientConnInterface
}

func NewTeacherClient(cc grpc.ClientConnInterface) TeacherClient {
	return &teacherClient{cc}
}

func (c *teacherClient) AskForTeacher(ctx context.Context, in *AskForTeacherMessage, opts ...grpc.CallOption) (*TeacherMessage, error) {
	out := new(TeacherMessage)
	err := c.cc.Invoke(ctx, Teacher_AskForTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeacherServer is the server API for Teacher service.
// All implementations must embed UnimplementedTeacherServer
// for forward compatibility
type TeacherServer interface {
	AskForTeacher(context.Context, *AskForTeacherMessage) (*TeacherMessage, error)
	mustEmbedUnimplementedTeacherServer()
}

// UnimplementedTeacherServer must be embedded to have forward compatible implementations.
type UnimplementedTeacherServer struct {
}

func (UnimplementedTeacherServer) AskForTeacher(context.Context, *AskForTeacherMessage) (*TeacherMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskForTeacher not implemented")
}
func (UnimplementedTeacherServer) mustEmbedUnimplementedTeacherServer() {}

// UnsafeTeacherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeacherServer will
// result in compilation errors.
type UnsafeTeacherServer interface {
	mustEmbedUnimplementedTeacherServer()
}

func RegisterTeacherServer(s grpc.ServiceRegistrar, srv TeacherServer) {
	s.RegisterService(&Teacher_ServiceDesc, srv)
}

func _Teacher_AskForTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskForTeacherMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).AskForTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teacher_AskForTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).AskForTeacher(ctx, req.(*AskForTeacherMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Teacher_ServiceDesc is the grpc.ServiceDesc for Teacher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Teacher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPCIntro.Teacher",
	HandlerType: (*TeacherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskForTeacher",
			Handler:    _Teacher_AskForTeacher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}
